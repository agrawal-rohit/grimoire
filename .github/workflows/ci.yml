name: CI

on:
  push:
    branches:
      - "main"
      - "release/v*.*.*"
  pull_request:
    branches:
      - "main"
      - "release/v*.*.*"
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  lint-test:
    name: Lint & Test
    runs-on: ubuntu-latest
    # Skip lint/test on "release" events
    if: github.event_name != 'release'
    permissions:
      contents: read
      actions: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: 20

      - name: Setup PNPM
        uses: pnpm/action-setup@v4

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run checks
        run: pnpm run check:ci

      - name: Run tests
        run: pnpm cov

      - name: Check coverage file
        id: cov
        run: |
          if [ -s ./coverage/lcov.info ]; then
            echo "nonempty=true" >> $GITHUB_OUTPUT
          else
            echo "nonempty=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload coverage to Codacy
        if: steps.cov.outputs.nonempty == 'true'
        uses: codacy/codacy-coverage-reporter-action@1.0.0
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: ./coverage/lcov.info

  pre-release:
    name: Pre-release
    runs-on: ubuntu-latest
    needs: lint-test
    # Only run on pushes to release/* branches
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/release/v')
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org

      - name: Setup PNPM
        uses: pnpm/action-setup@v4

      - name: Restore pnpm store cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Publish to npm
        run: pnpm run release
        env:
          # Used by @semantic-release/npm
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          # Used by semantic-release core and @semantic-release/github
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    name: Release
    runs-on: ubuntu-latest
    # Only run when a GitHub Release is published and it targets a release/* branch
    if: |
      github.event_name == 'release' &&
      startsWith(github.event.release.target_commitish, 'release/v') &&
      github.event.release.prerelease == false
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          ref: ${{ github.event.release.tag_name }}

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org

      - name: Setup PNPM
        uses: pnpm/action-setup@v4

      - name: Restore pnpm store cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Derive version from tag
        id: version
        run: |
          TAG="${{ github.event.release.tag_name }}"
          VERSION="${TAG#v}"
          echo "Resolved VERSION=$VERSION"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Set package.json version to stable
        run: npm version --no-git-tag-version "${{ steps.version.outputs.version }}"

      # Build step is intentionally omitted. If your package requires a build,
      # ensure it's handled by prepare/prepublishOnly scripts in package.json.
      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          pnpm publish --access public --no-git-checks --tag latest
